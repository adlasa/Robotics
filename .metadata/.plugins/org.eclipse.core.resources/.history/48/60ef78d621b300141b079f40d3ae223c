package org.usfirst.frc.team1458.robot;

import org.usfirst.frc.team1458.robot.Levels.CarryObject;
import org.usfirst.frc.team1458.robot.Levels.LevelMod;
import org.usfirst.frc.team1458.robot.Levels.LevelMode;
import org.usfirst.frc.team1458.robot.Levels.MainLevel;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Gyro;

public class Robot extends SampleRobot {
	Joystick right = new Joystick(0);
	Joystick left = new Joystick(1);
	Joystick buttonPanel = new Joystick(2);

	Timer timer = new Timer();
	Timer timer2 = new Timer();

	Encoder leftEncoder = new Encoder(0, 1);// need proper channels
	Encoder rightEncoder = new Encoder(2, 3);// need proper channels
	Encoder centreEncoder = new Encoder(4, 5);

	I2CGyro gyro = new I2CGyro();

	I2CMagnetometer magnetometer = new I2CMagnetometer();

	Infrared toteCheck = new Infrared(2, 2);
	Infrared seeRight = new Infrared(3, 0);
	Infrared seeLeft = new Infrared(4, 1);

	LED ledStrip = new LED();

	Compressor compressor = new Compressor(0);
	DoubleSolenoid hSolenoid = new DoubleSolenoid(0, 1);

	PowerDistributionPanel pdp = new PowerDistributionPanel();

	RobotFunctions robot;

	Elevator elevator;

	public Robot() {
		// initialise all of the things, for the elevator, robotfunctions, gyro,
		// etc.
		robot = new RobotFunctions();
		elevator = new Elevator();

	}

	/**
	 * Autonomous mode
	 */
	public void autonomous() {

	}

	/**
	 * operator controlled mode
	 */
	public void operatorControl() {

		compressor.start();

		gyro.reset();
		gyro.update();
		double gyroAngle;
		double gyroRate;

		seeRight.reset();

		magnetometer.zero();

		rightEncoder.setDistancePerPulse(1.0);
		leftEncoder.setDistancePerPulse(1.0);
		centreEncoder.setDistancePerPulse(1.0);

		timer.start();
		timer2.start();

		while (isEnabled() && isOperatorControl()) {
			SmartDashboard.putNumber("test encoder", leftEncoder.get());

			SmartDashboard.putNumber("Update speed (Hz)", 1 / timer.get());
			timer.reset();
			SmartDashboard.putNumber("Timer 2", timer2.get());
			if (timer2.get() >= 0.1) {
				SmartDashboard.putNumber("Infrared test distance", seeRight.getDistance());
				timer2.reset();
			}

			if (magnetometer.isReady()) {
				magnetometer.update();

			}
			SmartDashboard.putNumber("Direction", magnetometer.getAngle());

			gyroAngle = gyro.getAngle();
			gyroRate = gyro.getRate();
			System.out.println("Gyro Angle: " + gyroAngle);
			System.out.println("Gyro Rate: " + gyroRate);
			SmartDashboard.putNumber("Gyro Angle: ", gyroAngle);
			SmartDashboard.putNumber("Gyro Rate: ", gyroRate);

			gyro.update();

			elevator.update();
			robot.edrive(elevator.motorMovement);

			// intake of a stack n high
			if (buttonPanel.getRawButton(9)) {
				// raise elevator to level n+1-done by humans
				
				// run intake
				// lower elevator to level 1
				//
				
			}

			// outtake to n
			if (buttonPanel.getRawButton(10)) {
				// raise elevator to level n+1
				// lower elevator to level n
				// disengage
				// drive straight back a little bit

			}

			if (!robot.hMode) {
				robot.tankdrive(left.getAxis(Joystick.AxisType.kX), right.getAxis(Joystick.AxisType.kX));
			}
			if (right.getRawButton(3)) {
				// deploy H
				hSolenoid.set(DoubleSolenoid.Value.kForward);
				robot.hMode = true;
				robot.hdrive(left.getAxis(Joystick.AxisType.kY));
			}
			if (right.getRawButton(4)) {
				// retract H
				hSolenoid.set(DoubleSolenoid.Value.kReverse);
				robot.hMode = false;
			}

			robot.ldrive(-left.getAxis(Joystick.AxisType.kY));
			robot.rdrive(-right.getAxis(Joystick.AxisType.kY));

			if (buttonPanel.getRawButton(1)) {
				elevator.setMainLevel(Levels.MainLevel.ONE);
			} else if (buttonPanel.getRawButton(2)) {
				elevator.setMainLevel(Levels.MainLevel.TWO);
			} else if (buttonPanel.getRawButton(3)) {
				elevator.setMainLevel(Levels.MainLevel.THREE);
			} else if (buttonPanel.getRawButton(4)) {
				elevator.setMainLevel(Levels.MainLevel.FOUR);
			}

			if (buttonPanel.getRawButton(5)) {
				elevator.setLevelMode(Levels.LevelMode.FLOOR);
				elevator.setManual(false);
			} else if (buttonPanel.getRawButton(6)) {
				elevator.setLevelMode(Levels.LevelMode.PLATFORM);
				elevator.setManual(false);
			} else if (buttonPanel.getRawButton(7)) {
				elevator.setLevelMode(Levels.LevelMode.STEP);
				elevator.setManual(false);
			} else if (buttonPanel.getRawButton(8)) {
				elevator.setManual(true);
			}

			if (buttonPanel.getRawButton(13)) {
				elevator.setCarryObject(Levels.CarryObject.TOTE);
			} else {
				elevator.setCarryObject(Levels.CarryObject.CONTAINER);
			}

			if (buttonPanel.getRawButton(11)) {
				elevator.setManual(true);
				elevator.manualUp();
			} else if (buttonPanel.getRawButton(12)) {
				elevator.setManual(true);
				elevator.manualDown();
			} else if (elevator.getManual()) {
				elevator.stop();
			}

			if (!elevator.getManual()) {
				switch (elevator.getLevelMode()) {
				case FLOOR: {
					buttonPanel.setOutputs(1);
					buttonPanel.setOutput(1, false);
					break;
				}
				case STEP: {
					buttonPanel.setOutputs(1);
					buttonPanel.setOutput(2, false);
					break;
				}
				case PLATFORM: {
					buttonPanel.setOutputs(1);
					buttonPanel.setOutput(3, false);
					break;
				}

				}

			} else {
				buttonPanel.setOutputs(1);
				buttonPanel.setOutput(4, false);
			}
		}
	}

	public void elevatorMotor(double power) {
		robot.edrive(power);
	}

	/**
	 * Runs during test mode
	 */
	public void test() {

	}
}
/*
 * double lDp=0;//left Drive power double rDp=0;//right Drive power double
 * cDp=0;//centre Drive power
 * 
 * final double kPGyro=0.0; final double kIGyro=0.0; final double kDGyro=0.0;
 * 
 * final double kPEncoder=0.0; final double kIEncoder=0.0; final double
 * kDEncoder=0.0;
 * 
 * double adjustPGyro; double adjustIGyro; double adjustDGyro;
 * 
 * double adjustPEncoder; double adjustIEncoder; double adjustDEncoder;
 * 
 * double adjustGyro; double adjustEncoder; double adjustTotal;
 * 
 * double idealGyroAngle = 0;
 * 
 * double power;
 */

/*
 * power=right.getY();
 * 
 * adjustPGyro=kPGyro*(gyro.getAngle()-idealGyroAngle);
 * adjustIGyro=kIGyro*0;//not applicable but included for consistency
 * adjustDGyro=kDGyro*gyro.getRate();//based on rotation to right in
 * degrees/second adjustGyro=adjustPGyro+adjustIGyro+adjustPGyro;
 * 
 * adjustPEncoder=kPEncoder*(rightEncoder.get()-leftEncoder.get());
 * adjustIEncoder=kIEncoder*0;//also not applicable
 * adjustDEncoder=kDEncoder*(leftEncoder.getRate()-rightEncoder.getRate());
 * adjustEncoder=adjustPEncoder+adjustIEncoder+adjustPEncoder;
 * 
 * adjustTotal=adjustGyro+adjustEncoder; rDp=power-adjustTotal;
 * lDp=power+adjustTotal;
 * 
 * 
 * rightDriveFront.set(rDp); rightDriveRear.set(rDp); leftDriveFront.set(lDp);
 * leftDriveRear.set(lDp); centreDrive.set(cDp);
 * 
 * System.out.println("Right: " + rDp); SmartDashboard.putNumber("Right: ",
 * rDp);
 * 
 * System.out.println("Left: " + lDp); SmartDashboard.putNumber("Left: ", lDp);
 * 
 * System.out.println("Centre: "+cDp); SmartDashboard.putNumber("Centre:",cDp);
 * 
 * 
 * System.out.println("Right encoder: "+rightEncoder.getRaw());
 * SmartDashboard.putNumber("Right encoder: ",rightEncoder.getRaw());
 * 
 * System.out.println("Left encoder: "+leftEncoder.getRaw());
 * SmartDashboard.putNumber("Left encoder: ",leftEncoder.getRaw());
 */