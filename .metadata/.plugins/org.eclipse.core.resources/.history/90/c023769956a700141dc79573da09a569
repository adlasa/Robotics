package org.usfirst.frc.team1458.robot;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.SensorBase;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.communication.UsageReporting;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;
import edu.wpi.first.wpilibj.tables.ITable;
import edu.wpi.first.wpilibj.util.BoundaryException;
import edu.wpi.first.wpilibj.AccumulatorResult;

public class I2CMagnetometer extends edu.wpi.first.wpilibj.SensorBase {

	private double angle;
	I2C m_i2c;
	private double rate;
	private byte[] rawInput = new byte[2];
	private final int address = 0x0e;
	private Timer timer = new Timer();
	private double[] axes = new double[3]; // x y z

	/**
	 * Initialize the gyro. Calibrate the gyro by running for a number of
	 * samples and computing the center value for this part. Then use the center
	 * value as the Accumulator center value for subsequent measurements. It's
	 * important to make sure that the robot is not moving while the centering
	 * calculations are in progress, this is typically done when the robot is
	 * first turned on while it's sitting at rest before the competition starts.
	 */
	private void initMagnetometer() {
		byte[] buffer = new byte[1];
		if (m_i2c == null) {
			System.out.println("Null m_i2c");
		}

		m_i2c.read(0x07, 1, buffer);
		if ((int) buffer[0] != 0xc4) {
			System.out.println("Something has gone terribly wrong.");
			System.out.println(buffer[0]);
		}

		m_i2c.write(0x16, 0b00011010);
		m_i2c.write(0x15, 0b00110010);

		update();

	}

	/**
	 * Gyro constructor with only a channel.
	 *
	 * Use the default analog module slot.
	 *
	 * @param channel
	 *            The analog channel the gyro is connected to.
	 */
	public I2CMagnetometer() {
		// m_analog = new AnalogChannel(channel);
		m_i2c = new I2C(I2C.Port.kOnboard, address);
		// m_channelAllocated = true;
		initMagnetometer();
	}

	/**
	 * Return the actual angle in degrees that the robot is currently facing.
	 *
	 * The angle is based on the current accumulator value corrected by the
	 * oversampling rate, the gyro type, and the A/D calibration values. The
	 * angle is continuous, that is can go beyond 360 degrees. This make
	 * algorithms that wouldn't want to see a discontinuity in the gyro output
	 * as it sweeps past 0 on the second time around.
	 *
	 * @return the current heading of the robot in degrees. This heading is
	 *         based on integration of the returned rate from the gyro.
	 */
	public double getAngle() {
		update();
		// do math stuff to make more accurate;
		return angle;
	}

	/**
	 * Return the rate of rotation of the gyro
	 * 
	 * The rate is based on the most recent reading of the gyro analog value
	 * 
	 * @return the current rate in degrees per second
	 */
	public double getRate() {

		update();
		return rate;
	}

	public void update() {

		for (int f = 0; f != 2; f++) {
			m_i2c.read((0x01+2*f), 2, rawInput);
			// convert it into number format
			int i = (int) rawInput[0];
			i *= 256;
			i += (int) rawInput[1];
			axes[f] = (double) i;
		}
		//calculate stuffs

		angle = 0;//placeholder
	}

	public double rateAdjust(int i) {
		return (((double) i) - 1.81347822) / 16.384;// old was 3.584,16.66666;
													// next was
													// 1.5015,8.93879626, then
													// 1.11951544, then
													// 0.058795502
	}
}